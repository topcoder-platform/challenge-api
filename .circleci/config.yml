version: 2.1
parameters:
    run_basedeployment:
        default: true
        type: boolean
    run_performancetesting:
        default: false
        type: boolean

defaults: &defaults
    docker:
      - image: circleci/python:2.7-stretch-browsers
install_dependency: &install_dependency
  name: Installation of build and deployment dependencies.
  command: |
    sudo apt install jq
    sudo pip install awscli --upgrade
    sudo pip install docker-compose
install_deploysuite: &install_deploysuite
  name: Installation of install_deploysuite.
  command: |
    git clone --branch v1.4 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
    cp ./../buildscript/master_deploy.sh .
    cp ./../buildscript/buildenv.sh .
    cp ./../buildscript/awsconfiguration.sh .
restore_cache_settings_for_build: &restore_cache_settings_for_build
  key: docker-node-modules-{{ checksum "package-lock.json" }}

save_cache_settings: &save_cache_settings
  key: docker-node-modules-{{ checksum "package-lock.json" }}
  paths:
    - node_modules

builddeploy_steps: &builddeploy_steps
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - restore_cache: *restore_cache_settings_for_build
      - run: ./build.sh ${APPNAME}
      - save_cache: *save_cache_settings
      - deploy:
          name: Running MasterScript.
          command: |
            ./awsconfiguration.sh $DEPLOY_ENV
            source awsenvconf
            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${LOGICAL_ENV}-global-appvar,${LOGICAL_ENV}-${APPNAME}-appvar -i ${APPNAME}
            curl --request POST \
            --url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
            --header "Circle-Token: ${CIRCLE_TOKEN}" \
            --header 'content-type: application/json' \
            --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_performancetesting":true, "run_basedeployment": false}}'

jobs:
  # Build & Deploy against development backend
  "build-dev":
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "challenge-api"    
    steps: *builddeploy_steps

  "build-prod":
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"    
      APPNAME: "challenge-api"  
    steps: *builddeploy_steps

  "Performance-Testing":
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo
    
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run: mvn verify

      - store_artifacts:
          path: target/jmeter/reports


workflows:
  version: 2
  build:
    when: << pipeline.parameters.run_basedeployment >>
    jobs:
      # Development builds are executed on "develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only:
                - develop

      # Production builds are exectuted only on tagged commits to the
      # master branch.
      - "build-prod":
          context : org-global
          filters:
            branches:
              only: master

  Performance Testing:
   when: << pipeline.parameters.run_performancetesting >>
   jobs:
      # Performance Test is executed on "develop" branch only.
      - Hold [Performance-Testing]:
          type: approval
      - Performance-Testing:
          requires:
            - Hold [Performance-Testing]
          filters:
            branches:
              only:
                - develop
                - feature/performance
                - performance